@page "{id:guid}"
@using CCC.Entities
@using CCC.Enums
@using CCC.website.Models
@model CCC.website.Pages.BikeRoutes.EditPageModel

@{
    ViewData["Title"] = "Edit Route Listing";
}

@section StyleSheets
{
    @* <link rel="stylesheet" href="https://unpkg.com/bootstrap-table@1.22.1/dist/bootstrap-table.min.css"> *@
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css">
}

@section Scripts
{
    @* <script src="https://unpkg.com/bootstrap-table@1.22.1/dist/bootstrap-table.min.js"></script> *@
     	
    <script>
        $(function() {
            console.log( "ready!" );
            var cuesJson = document.getElementById("route-cues").dataset.cues;
            console.log("cues json ", cuesJson);
            var cues = JSON.parse(cuesJson);
            console.log("cues ", cues);

            for (let i = 0; i < cues.length ; i++) {
                addRow(cues[i]);
            }

        });

        function generateLabel(labelFor, labelValue) {
            var label = document.createElement("label");
            label.setAttribute("for", labelFor);
            label.innerHTML = labelValue;
            return label;
        }

        function generateTextInput(id, name, value) {
            var input = document.createElement("input");
            input.setAttribute("class", "form-control");
            input.type = "text";
            input.id = id;
            input.name = name;
            if(value != undefined) {
                input.value = value;
            }
            return input;
        }

        function generateOperationDropdown(id, name, value) {
            console.log("generating dropdown ", {id, name, value});
            var options = JSON.parse(document.getElementById("route-cues").dataset.operations);
            
            var selectList = document.createElement("select");
            selectList.id = id;
            for(let i=0 ; i<options.length ; i++) {
                var option = document.createElement("option");
                option.value = options[i];
                option.text = options[i];
                if(value != undefined && value == options[i]) {
                    console.log("value matches index i ", i);
                    option.selected = true;
                }
                selectList.append(option);
            }

            return selectList;
        }

        function generateActions(index) {
            var deleteBtn = document.createElement("button");
            deleteBtn.type = "button";
            deleteBtn.id = `delete-row-${index}`;
            deleteBtn.value = "Delete";
            deleteBtn.innerHTML = "Delete";
            deleteBtn.setAttribute("class", "btn btn-warning");
            deleteBtn.onclick = function() { deleteRow(index);};

            var insert = document.createElement("button");
            insert.type = "button";
            insert.id = `insert-row-${index}`;
            insert.value = "Insert";
            insert.innerHTML = "Insert";
            insert.setAttribute("class", "btn btn-success");
            insert.onclick = function() { insertRow(index);};
            
            var div = document.createElement("div");
            div.appendChild(insert);
            div.appendChild(deleteBtn);
            return div;

        }
        function addRow(row) {
            var tableBody = document.getElementById("cueEditTableBody");
            var lastRow = document.getElementById("lastrow");
            var index = JSON.parse(tableBody.dataset.rows);
            tableBody.insertBefore( generateRow(index, row), lastRow);
            tableBody.dataset.rows = index+1;
        }

        function generateRow(index, row)
        {
            var existing = row != undefined;
            console.log("generateRow index ", index);
            if(existing) {
                console.log("Existing true. row ", row);
            }
            var newRow = document.createElement("tr");
            newRow.id = `row-${index}`;
            
            var op = document.createElement("td");
            op.appendChild(generateOperationDropdown(`row-${index}-op`, `row-${index}-op`, existing ? row.Operation : undefined));
            newRow.appendChild(op);
            
            var description = document.createElement("td");
            description.appendChild(generateTextInput(`row-${index}-description`, `row-${index}-description`, existing ? row.Description : "Description"));
            newRow.appendChild(description);

            var mileMarker = document.createElement("td");
            mileMarker.appendChild(generateTextInput(`row-${index}-mile-marker`, `row-${index}-mile-marker`, existing ? row.MileMarker : "Mile Marker"));            
            newRow.appendChild(mileMarker);

            var actions = document.createElement("td");
            actions.appendChild(generateActions(index));
            newRow.appendChild(actions);
            return newRow;
        }

        function insertRow(index) {
            var targetRow = document.getElementById(`row-${index}`);
            if(targetRow != undefined) {
                var tableBody = document.getElementById("cueEditTableBody");
                var index = JSON.parse(tableBody.dataset.rows) +1;
                targetRow.parentElement.insertBefore(generateRow(index), targetRow);
                tableBody.dataset.rows = index;
            }
            @* alert(`Inserting row before ${index}`); *@
        }

        function deleteRow(index) {
            var row = document.getElementById(`row-${index}`);
            if(row != undefined) {
                row.parentElement.removeChild(row);
            }
        }

        function getCues() {
            let output = [];
            var tableBody = document.getElementById("cueEditTableBody");
            for(const row of tableBody.children) {
                console.log("Processing row ", row.id);
                if(row.id != "lastrow") {
                    var op = document.getElementById(`${row.id}-op`);
                    var operation = op.options[ op.selectedIndex].value;
                    let entry = {
                        Operation : operation,
                        Description : document.getElementById(`${row.id}-description`).value,
                        MileMarker : document.getElementById(`${row.id}-mile-marker`).value
                        @* StreetName : document.getElementById(`${row.id}-name`).value, *@
                        @* Notes : document.getElementById(`${row.id}-notes`).value, *@
                    };
                    console.log(entry);
                    output.push(entry);
                }
            }
            return output;
        }

        function submitForm() {
            console.log("submitting form");
            var id = document.getElementById("Id").value;
            var name = document.getElementById("Name").value;
            var description = document.getElementById("Description").value;
            var distance = document.getElementById("Distance").value;
            var rideWithGPSRouteId = document.getElementById("RideWithGPSRouteId").value;
            var rideWithGPSLink = document.getElementById("RideWithGPSLink").value;
            var garminConnectLink = document.getElementById("GarminConnectLink").value;
            var cues = getCues();

            $.ajax({
                url: '?handler=Update',
                type: "POST",
                beforeSend: function(xhr) {
                    xhr.setRequestHeader("RequestVerificationToken", $('input:hidden[name="__RequestVerificationToken"]').val());
                },
                data: {
                    id,
                    name,
                    description,
                    distance,
                    rideWithGPSRouteId,
                    rideWithGPSLink,
                    garminConnectLink,
                    cues
                }
            }).done(function(data) {
                console.log(data);
                if(data.result == "success") {
                    console.log("update complete");
                    window.location.href = '@Url.Content($"~/BikeRoutes/Details/{Model.Id}")';
                } else {
                    alert(data.result);
                }
            })

        }

    </script>
}

<div class="row">
    Bike Route Details
    <div id="route-cues" data-cues='@Html.Raw(Model.CuesJson)' data-operations='@Html.Raw(Model.OperationsJson)'></div>
</div>
<form method="post">
    <div class="form-group">
        @Html.HiddenFor(model => Model.Id)
        @Html.LabelFor(model => Model.Name)
        @Html.EditorFor(model => Model.Name, new
            {
                htmlAttributes = new
                {
                    @class = "form-control",
                    @placeholder = "name"
                }
            })
        <small id="name" class="form-text text-muted">What's the name of the route?</small>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => Model.Description)
        @Html.EditorFor(model => Model.Description, new { htmlAttributes = new { @class = "form-control" } })
        <small id="desciption" class="form-text text-muted">Provide a description of the route</small>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => Model.Distance)
        @Html.EditorFor(model => Model.Distance, new { htmlAttributes = new { @class = "form-control" } })
        <small id="desciption" class="form-text text-muted">How many miles?</small>
    </div>


    <div class="form-group">
        @Html.LabelFor( model => Model.RideWithGPSRouteId)
        @Html.EditorFor( model => Model.RideWithGPSRouteId, new { htmlAttributes = new { @class = "form-control" } })
        <small id="desciption" class="form-text text-muted">Ride With GPS Route Id</small>
    </div>

    <div class="form-group">
        @Html.LabelFor( model => Model.RideWithGPSLink)
        @Html.EditorFor( model => Model.RideWithGPSLink, new { htmlAttributes = new { @class = "form-control" } })
        <small id="desciption" class="form-text text-muted">Link to Ride With GPS Route</small>
    </div>

    <div class="form-group">
        @Html.LabelFor( model => Model.GarminConnectLink)
        @Html.EditorFor( model => Model.GarminConnectLink, new { htmlAttributes = new { @class = "form-control" } })
        <small id="desciption" class="form-text text-muted">Link to Garmin Connect Route</small>
    </div>


 <p> </p>

    <table class="table table-striped table-bordered table-sm" id="cueEditTable">
        <thead>
            <tr>
                <th>Operation</th>
                <th>Description</th>
                @* <th>Street / Landmark</th>
                <th>Notes</th> *@
                <th>Mile Marker</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody id="cueEditTableBody" data-rows=0>

            <tr id="lastrow">
                <th></th>
                <th></th>
                @* <th></th> *@
                @* <th></th> *@
                <th></th>
                <th><button type="button" class="btn btn-secondary" id="AddCue" value="Add Cue" onclick='addRow()'>Add Cue</button></th>
            </tr>
        </tbody>
         
    </table>
    @* <input class="btn btn-success" id="Submit" type="submit" value="Save Changes" asp-page-handler="Update"/> *@
    <button type="button" class="btn btn-success" value="Save Changes" onclick="submitForm()">Save Changes</button>

    <input class="btn btn-warning" id="Discard" type="submit" value="Discard Changes" asp-page-handler="DiscardChanges"
        onclick="return confirm('Are you sure?')" />
    <input class="btn btn-danger" id="Delete" type="submit" value="Delete Route" asp-page-handler="Delete"
        onclick="return confirm('Are you sure you want to Delete the route?')" />    
</form>